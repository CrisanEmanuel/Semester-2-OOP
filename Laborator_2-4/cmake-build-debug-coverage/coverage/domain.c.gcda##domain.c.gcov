        -:    0:Source:C:/Users/EMANUEL/Desktop/OOP/Laborator_2-4/domain.c
        -:    0:Graph:C:\Users\EMANUEL\Desktop\OOP\Laborator_2-4\cmake-build-debug-coverage\CMakeFiles\Laborator_2_4.dir\domain.c.gcno
        -:    0:Data:C:\Users\EMANUEL\Desktop\OOP\Laborator_2-4\cmake-build-debug-coverage\CMakeFiles\Laborator_2_4.dir\domain.c.gcda
        -:    0:Runs:1
        -:    1:#include "domain.h"
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:
function createOffer called 33 returned 100% blocks executed 100%
       33:    5:Offer createOffer(char *type, float area, char *address, float price){
        -:    6:    Offer rez;
        -:    7:
       33:    8:    unsigned long long nr_caractere = strlen(type) + 1;
       33:    9:    rez.type = malloc(nr_caractere * sizeof(char));
       33:   10:    strcpy(rez.type, type);
        -:   11:
       33:   12:    rez.area = area;
        -:   13:
       33:   14:    nr_caractere = strlen(address) + 1;
       33:   15:    rez.address = malloc(nr_caractere * sizeof(char));
       33:   16:    strcpy(rez.address, address);
        -:   17:
       33:   18:    rez.price = price;
       33:   19:    return rez;
       33:   19-block  0
        -:   20:}
        -:   21:
function destroyOffer called 25 returned 100% blocks executed 100%
       25:   22:void destroyOffer(Offer *o){
       25:   23:    free(o -> type);
       25:   24:    free(o -> address);
        -:   25:    //no memory is allocated on the heap
        -:   26:    //nothing to deallocate
        -:   27:    //mark that offer is destroyed, avoid accidental use after destroy
       25:   28:    o -> area = -1;
       25:   29:    o -> price = -1;
       25:   30:}
        -:   31:
function eq called 2 returned 100% blocks executed 100%
        2:   32:int eq(Offer o, Offer other){
        2:   33:    if(strcmp(o.type, other.type) == 0 && strcmp(o.address, other.address) == 0 && (o.price == other.price) && (o.area == other.area))
        2:   33-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   33-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   33-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:   33-block  3
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1:   34:        return 1;
        1:   34-block  0
        1:   35:    return 0;
        1:   35-block  0
        -:   36:}
