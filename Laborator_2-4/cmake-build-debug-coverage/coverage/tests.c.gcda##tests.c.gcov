        -:    0:Source:C:/Users/EMANUEL/Desktop/OOP/Laborator_2-4/tests.c
        -:    0:Graph:C:\Users\EMANUEL\Desktop\OOP\Laborator_2-4\cmake-build-debug-coverage\CMakeFiles\Laborator_2_4.dir\tests.c.gcno
        -:    0:Data:C:\Users\EMANUEL\Desktop\OOP\Laborator_2-4\cmake-build-debug-coverage\CMakeFiles\Laborator_2_4.dir\tests.c.gcda
        -:    0:Runs:1
        -:    1:#include "tests.h"
        -:    2:#include <assert.h>
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:
function runAll called 1 returned 100% blocks executed 100%
        1:    6:void runAll(){
        1:    7:    testsDomain();
        1:    7-block  0
call    0 returned 1
        1:    8:    testsRepo();
call    0 returned 1
        1:    9:    testsService();
call    0 returned 1
        -:   10:
        1:   11:    testeActualizareService();
call    0 returned 1
        -:   12:
        1:   13:    testeFiltrareService();
call    0 returned 1
        -:   14:
        1:   15:    testeSortareService();
call    0 returned 1
        -:   16:
        1:   17:    testeStergereService();
call    0 returned 1
        -:   18:
        1:   19:    printf("All tests passed!\n");
call    0 returned 1
        1:   20:}
        -:   21:
function testsDomain called 1 returned 100% blocks executed 56%
        1:   22:void testsDomain(){
        1:   23:    Offer o = createOffer("casa", 150,"Inului", 120000);
        1:   23-block  0
call    0 returned 1
       1*:   24:    assert(strcmp(o.type, "casa") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   24-block  0
call    2 never executed
        1:   24-block  1
       1*:   25:    assert(strcmp(o.address, "Inului") == 0);
        1:   25-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   25-block  1
call    2 never executed
        1:   25-block  2
       1*:   26:    assert(o.price == 120000);
        1:   26-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   26-block  1
call    2 never executed
        1:   26-block  2
       1*:   27:    assert(o.area == 150);
        1:   27-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   27-block  1
call    2 never executed
        1:   27-block  2
        -:   28:
        1:   29:    destroyOffer(&o);
        1:   29-block  0
call    0 returned 1
       1*:   30:    assert(o.price = -1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   30-block  0
call    2 never executed
        1:   30-block  1
       1*:   31:    assert(o.area = -1);
        1:   31-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   31-block  1
call    2 never executed
        1:   31-block  2
        1:   32:}
        -:   33:
function testsRepo called 1 returned 100% blocks executed 71%
        1:   34:void testsRepo(){
        1:   35:    MyList l1 = createEmpty();
        1:   35-block  0
call    0 returned 1
        1:   36:    add(&l1, createOffer("teren",2400,"Ciresului",90000));
call    0 returned 1
call    1 returned 1
        1:   37:    add(&l1, createOffer("apartament",400,"Arghezi",8900));
call    0 returned 1
call    1 returned 1
        1:   38:    MyList l2 = copyList(&l1);
call    0 returned 1
       1*:   39:    assert(size(&l1) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   39-block  0
call    3 never executed
        1:   39-block  1
       1*:   40:    assert(size(&l2) == 2);
        1:   40-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   40-block  1
call    3 never executed
        1:   40-block  2
        -:   41:
        1:   42:    Offer o =  get(&l1, 0);
        1:   42-block  0
call    0 returned 1
       1*:   43:    assert(strcmp(o.type,"teren") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   43-block  0
call    2 never executed
        1:   43-block  1
        -:   44:
        1:   45:    o = get(&l1, 1);
        1:   45-block  0
call    0 returned 1
       1*:   46:    assert(strcmp(o.address,"Arghezi") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   46-block  0
call    2 never executed
        1:   46-block  1
        -:   47:
        1:   48:    destroy(&l1);
        1:   48-block  0
call    0 returned 1
        1:   49:    destroy(&l2);
call    0 returned 1
       1*:   50:    assert(size(&l1) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   50-block  0
call    3 never executed
        1:   50-block  1
        1:   51:}
        -:   52:
function testeSortareService called 1 returned 100% blocks executed 64%
        1:   53:void testeSortareService(){
        1:   54:    MyList l = createEmpty();
        1:   54-block  0
call    0 returned 1
        -:   55:
        1:   56:    int ok1 = addOffer(&l, "teren", 200, "str1", 200);
call    0 returned 1
       1*:   57:    assert(ok1 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   57-block  0
call    2 never executed
        1:   57-block  1
       1*:   58:    assert(size(&l) == 1);
        1:   58-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   58-block  1
call    3 never executed
        1:   58-block  2
        -:   59:
        1:   60:    int ok2 = addOffer(&l, "casa", 245, "str2", 2010);
        1:   60-block  0
call    0 returned 1
       1*:   61:    assert(ok2 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   61-block  0
call    2 never executed
        1:   61-block  1
       1*:   62:    assert(size(&l) == 2);
        1:   62-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   62-block  1
call    3 never executed
        1:   62-block  2
        -:   63:
        1:   64:    int ok3 = addOffer(&l, "apartament", 245, "str3", 200);
        1:   64-block  0
call    0 returned 1
       1*:   65:    assert(ok3 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   65-block  0
call    2 never executed
        1:   65-block  1
       1*:   66:    assert(size(&l) == 3);
        1:   66-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   66-block  1
call    3 never executed
        1:   66-block  2
        -:   67:
        1:   68:    MyList sortare = sortare_dupa_pret_tip_service(l);
        1:   68-block  0
call    0 returned 1
       1*:   69:    assert(eq(sortare.elems[0],l.elems[1]) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   69-block  0
call    3 never executed
        1:   69-block  1
       1*:   70:    assert(eq(sortare.elems[1],l.elems[0]) == 1);
        1:   70-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   70-block  1
call    3 never executed
        1:   70-block  2
        1:   71:    destroy(&sortare);
        1:   71-block  0
call    0 returned 1
        -:   72:
        1:   73:    destroy(&l);
call    0 returned 1
       1*:   74:    assert(size(&l) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   74-block  0
call    3 never executed
        1:   74-block  1
        1:   75:}
        -:   76:
function testeFiltrareService called 1 returned 100% blocks executed 66%
        1:   77:void testeFiltrareService(){
        1:   78:    MyList l = createEmpty();
        1:   78-block  0
call    0 returned 1
        -:   79:
        1:   80:    int ok1 = addOffer(&l, "teren", 200, "str1", 200);
call    0 returned 1
       1*:   81:    assert(ok1 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   81-block  0
call    2 never executed
        1:   81-block  1
       1*:   82:    assert(size(&l) == 1);
        1:   82-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   82-block  1
call    3 never executed
        1:   82-block  2
        -:   83:
        1:   84:    int ok2 = addOffer(&l, "casa", 245, "str2", 450);
        1:   84-block  0
call    0 returned 1
       1*:   85:    assert(ok2 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   85-block  0
call    2 never executed
        1:   85-block  1
       1*:   86:    assert(size(&l) == 2);
        1:   86-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   86-block  1
call    3 never executed
        1:   86-block  2
        -:   87:
        1:   88:    int ok3 = addOffer(&l, "apartament", 245, "str3", 451);
        1:   88-block  0
call    0 returned 1
       1*:   89:    assert(ok3 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   89-block  0
call    2 never executed
        1:   89-block  1
       1*:   90:    assert(size(&l) == 3);
        1:   90-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   90-block  1
call    3 never executed
        1:   90-block  2
        -:   91:
        1:   92:    MyList filtrare1 = filtrare_dupa_criteriu_service(l, "suprafata", "200");
        1:   92-block  0
call    0 returned 1
       1*:   93:    assert(size(&filtrare1) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   93-block  0
call    3 never executed
        1:   93-block  1
        1:   94:    destroy(&filtrare1);
        1:   94-block  0
call    0 returned 1
        -:   95:
        1:   96:    MyList filtrare2 = filtrare_dupa_criteriu_service(l, "tip", "casa");
call    0 returned 1
       1*:   97:    assert(size(&filtrare2) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   97-block  0
call    3 never executed
        1:   97-block  1
        1:   98:    destroy(&filtrare2);
        1:   98-block  0
call    0 returned 1
        -:   99:
        1:  100:    MyList filtrare3 = filtrare_dupa_criteriu_service(l, "pret", "200");
call    0 returned 1
       1*:  101:    assert(size(&filtrare3) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  101-block  0
call    3 never executed
        1:  101-block  1
        1:  102:    destroy(&filtrare3);
        1:  102-block  0
call    0 returned 1
        -:  103:
        1:  104:    destroy(&l);
call    0 returned 1
       1*:  105:    assert(size(&l) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  105-block  0
call    3 never executed
        1:  105-block  1
        1:  106:}
        -:  107:
function testeActualizareService called 1 returned 100% blocks executed 64%
        1:  108:void testeActualizareService(){
        1:  109:    MyList l = createEmpty();
        1:  109-block  0
call    0 returned 1
        1:  110:    int ok1 = addOffer(&l, "teren", 200, "str1", 200);
call    0 returned 1
       1*:  111:    assert(ok1 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  111-block  0
call    2 never executed
        1:  111-block  1
       1*:  112:    assert(size(&l) == 1);
        1:  112-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  112-block  1
call    3 never executed
        1:  112-block  2
        -:  113:
        1:  114:    int ver1 = actualizeaza_oferta_service(&l, "teren", "str1", "casa", 400, "str4", 200);
        1:  114-block  0
call    0 returned 1
       1*:  115:    assert(ver1 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  115-block  0
call    2 never executed
        1:  115-block  1
        -:  116:
        1:  117:    int ver2 = actualizeaza_oferta_service(&l, "casa", "str10", "teren", 400, "str4", 120);
        1:  117-block  0
call    0 returned 1
       1*:  118:    assert(ver2 == -1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  118-block  0
call    2 never executed
        1:  118-block  1
        -:  119:
        1:  120:    destroy(&l);
        1:  120-block  0
call    0 returned 1
       1*:  121:    assert(size(&l) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  121-block  0
call    3 never executed
        1:  121-block  1
        1:  122:}
        -:  123:
function testeStergereService called 1 returned 100% blocks executed 62%
        1:  124:void testeStergereService(){
        1:  125:    MyList l = createEmpty();
        1:  125-block  0
call    0 returned 1
        -:  126:
        1:  127:    int ok1 = addOffer(&l, "teren", 200, "str1", 200);
call    0 returned 1
       1*:  128:    assert(ok1 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  128-block  0
call    2 never executed
        1:  128-block  1
       1*:  129:    assert(size(&l) == 1);
        1:  129-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  129-block  1
call    3 never executed
        1:  129-block  2
        -:  130:
        1:  131:    int ok2 = addOffer(&l, "casa", 245, "str2", 450);
        1:  131-block  0
call    0 returned 1
       1*:  132:    assert(ok2 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  132-block  0
call    2 never executed
        1:  132-block  1
       1*:  133:    assert(size(&l) == 2);
        1:  133-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  133-block  1
call    3 never executed
        1:  133-block  2
        -:  134:
        1:  135:    int ok3 = addOffer(&l, "apartament", 245, "str3", 451);
        1:  135-block  0
call    0 returned 1
       1*:  136:    assert(ok3 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  136-block  0
call    2 never executed
        1:  136-block  1
       1*:  137:    assert(size(&l) == 3);
        1:  137-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  137-block  1
call    3 never executed
        1:  137-block  2
        -:  138:
        1:  139:    int aux1 = sterge_oferta_service(&l, "teren", "str1");
        1:  139-block  0
call    0 returned 1
       1*:  140:    assert(aux1 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  140-block  0
call    2 never executed
        1:  140-block  1
       1*:  141:    assert(size(&l) == 2);
        1:  141-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  141-block  1
call    3 never executed
        1:  141-block  2
        -:  142:
        1:  143:    int aux2 = sterge_oferta_service(&l, "nimic", "str41");
        1:  143-block  0
call    0 returned 1
       1*:  144:    assert(aux2 == -1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  144-block  0
call    2 never executed
        1:  144-block  1
       1*:  145:    assert(size(&l) == 2);
        1:  145-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  145-block  1
call    3 never executed
        1:  145-block  2
        -:  146:
        1:  147:    destroy(&l);
        1:  147-block  0
call    0 returned 1
       1*:  148:    assert(size(&l) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  148-block  0
call    3 never executed
        1:  148-block  1
        1:  149:}
        -:  150:
function testsService called 1 returned 100% blocks executed 62%
        1:  151:void testsService(){
        1:  152:    MyList l = createEmpty();
        1:  152-block  0
call    0 returned 1
        -:  153:    //try to add invalid offers
        1:  154:    int error = addOffer(&l, "", 120, "strada", 24);
call    0 returned 1
       1*:  155:    assert(error != 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  155-block  0
call    2 never executed
        1:  155-block  1
       1*:  156:    assert(size(&l) == 0);
        1:  156-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  156-block  1
call    3 never executed
        1:  156-block  2
        -:  157:
        1:  158:    error = addOffer(&l, "casa", -120, "strada", 24);
        1:  158-block  0
call    0 returned 1
       1*:  159:    assert(error != 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  159-block  0
call    2 never executed
        1:  159-block  1
       1*:  160:    assert(size(&l) == 0);
        1:  160-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  160-block  1
call    3 never executed
        1:  160-block  2
        -:  161:
        1:  162:    error = addOffer(&l, "casa", 120, "", 24);
        1:  162-block  0
call    0 returned 1
       1*:  163:    assert(error != 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  163-block  0
call    2 never executed
        1:  163-block  1
       1*:  164:    assert(size(&l) == 0);
        1:  164-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  164-block  1
call    3 never executed
        1:  164-block  2
        -:  165:
        1:  166:    error = addOffer(&l, "casa", 120, "strada", -24);
        1:  166-block  0
call    0 returned 1
       1*:  167:    assert(error != 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  167-block  0
call    2 never executed
        1:  167-block  1
       1*:  168:    assert(size(&l) == 0);
        1:  168-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  168-block  1
call    3 never executed
        1:  168-block  2
        -:  169:
        1:  170:    destroy(&l);
        1:  170-block  0
call    0 returned 1
       1*:  171:    assert(size(&l) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  171-block  0
call    3 never executed
        1:  171-block  1
        1:  172:}
